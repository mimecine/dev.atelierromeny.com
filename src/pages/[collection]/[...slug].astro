---
import { type CollectionEntry, getCollection, getEntry, render } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import { Image } from "astro:assets";

export async function getStaticPaths() {
  let collections = await getCollection("collections");
  const allWorks: CollectionEntry<"collections"> = {id:'_works', collection: 'collections', data:{title:'Works'}};
  collections.push(allWorks);
  
  let works = (await getCollection("works")).filter((work) => work.data.image);

  return collections
    .map(( collection ) => {
      return works
        .map((work, i) => ({
          params: {
            collection: collection.id,
            slug: work.id,
          },
          props: {work, collection},
        }));
    })
    .flat();
}

type Props = {
  collection: CollectionEntry<"collections">;
  work: CollectionEntry<"works">;
};
type Params = {
  collection: string;
  slug: string;
};
const { work, collection } = Astro.props;

const { Content } = await render(work);



const works = (await getCollection("works"))
  .filter((work) => work.data.image)
  .filter((work) => work.data.collections?.includes(collection.data.title || '') || collection.data.title === "Works")
  .sort((a, b) => a.data.title?.localeCompare(b.data.title || '(Untitled)') || 0);

type Acc = {
  previous: CollectionEntry<"works"> | null;
  next: CollectionEntry<"works"> | null;
};
type AccCount = {
  count: number | null;
  index: number | null;
};
const { previous, next } = works.reduce(
  (acc: Acc, work, i) => {
    if (work.id === Astro.params.slug) {
      acc.previous = works[i - 1] || null;
      acc.next = works[i + 1] || null;
    }
    return acc;
  },
  { previous: null, next: null }
);
const { count, index } = works.reduce(
  (acc: AccCount, work, i) => {
    if (work.id === Astro.params.slug) {
      acc.count = works.length;
      acc.index = i;
    }
    return acc;
  },
  { count: 0, index: 0 }
);
---

<Layout>
  <section class="grid max-w-4xl mx-auto py-4">
    {
      work.data.image && (
        <Image src={work.data.image} alt={work.data.title || ""} width={1024} class="object-contain h-[70vh]"/>
      )
    }
    <h5 class="pt-4">
      {work.data.title}
      {work.data.year_start && `, ${work.data.year_start}`}
      {work.data.year_end && ` - ${work.data.year_end}`}
      {work.data.w && work.data.h && `( ${work.data.w} x ${work.data.h} )`}
    </h5>


    <ul class="flex justify-between items-center uppercase" x-data>
          <li>
            {previous && (
            <a @keyup.window.left="$el.click()" href={`/${collection.id}/${previous.id}`} alt={previous.data.title} title={previous.data.title}><span class="text-black opacity-30">&larr;</span> Previous</a>
            )}
          </li>
      <li>
        {index > 0 && (
          <span>{index + 1} of {count}</span>
        
        )}
      </li>
          <li>
            {next && (
            <a @keyup.window.right="$el.click()" href={`/${collection.id}/${next.id}`} alt={next.data.title} title={next.data.title}>Next <span class="text-black opacity-30">&rarr;</span></a>
            )}
          </li>
      </ul>
      <a href="./" @keyup.window.esc="$el.click()" class="hidden">Back to collection</a>
  </section>

</Layout>

<style>
  @reference "../../styles/global.css";
  article {
    @apply p-4;
  }
  article img {
    max-width: 100%;
    height: auto;
    @apply border  object-contain;
  }
  article h1 {
    @apply text-2xl font-bold;
  }
</style>
